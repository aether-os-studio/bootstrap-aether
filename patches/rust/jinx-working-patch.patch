diff -urN --no-dereference rust-clean/Cargo.lock rust-workdir/Cargo.lock
--- rust-clean/Cargo.lock
+++ rust-workdir/Cargo.lock
@@ -2040,9 +2040,7 @@
 
 [[package]]
 name = "libc"
-version = "0.2.169"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b5aba8db14291edd000dfcc4d620c7ebfb122c613afb886ca8803fa4e128a20a"
+version = "0.2.172"
 
 [[package]]
 name = "libdbus-sys"
diff -urN --no-dereference rust-clean/Cargo.toml rust-workdir/Cargo.toml
--- rust-clean/Cargo.toml
+++ rust-workdir/Cargo.toml
@@ -93,3 +93,6 @@
 # FIXME: LTO cannot be enabled for binaries in a workspace
 # <https://github.com/rust-lang/cargo/issues/9330>
 # lto = true
+
+[patch.crates-io]
+libc = { path = "/base_dir/sources/rust-libc" }
diff -urN --no-dereference rust-clean/compiler/rustc_target/src/spec/base/linux_mlibc.rs rust-workdir/compiler/rustc_target/src/spec/base/linux_mlibc.rs
--- rust-clean/compiler/rustc_target/src/spec/base/linux_mlibc.rs	1970-01-01 01:00:00.000000000 +0100
+++ rust-workdir/compiler/rustc_target/src/spec/base/linux_mlibc.rs
@@ -0,0 +1,27 @@
+use crate::spec::{base, Cc, LinkArgs, LinkerFlavor, Lld, TargetOptions};
+
+pub(crate) fn opts() -> TargetOptions {
+    let mut base = base::linux::opts();
+    let mut args = LinkArgs::new();
+
+    args.insert(
+        LinkerFlavor::Gnu(Cc::Yes, Lld::No),
+        vec![
+            // We want to be able to strip as much executable code as possible
+            // from the linker command line, and this flag indicates to the
+            // linker that it can avoid linking in dynamic libraries that don't
+            // actually satisfy any symbols up to that point (as with many other
+            // resolutions the linker does). This option only applies to all
+            // following libraries so we're sure to pass it as one of the first
+            // arguments.
+            "-Wl,--as-needed".to_string().into(),
+            // Always enable NX protection when it is available
+            "-Wl,-z,noexecstack".to_string().into(),
+        ],
+    );
+
+    base.env = "mlibc".into();
+    base.pre_link_args = args;
+
+    base
+}
diff -urN --no-dereference rust-clean/compiler/rustc_target/src/spec/base/mod.rs rust-workdir/compiler/rustc_target/src/spec/base/mod.rs
--- rust-clean/compiler/rustc_target/src/spec/base/mod.rs
+++ rust-workdir/compiler/rustc_target/src/spec/base/mod.rs
@@ -15,6 +15,7 @@
 pub(crate) mod l4re;
 pub(crate) mod linux;
 pub(crate) mod linux_gnu;
+pub(crate) mod linux_mlibc;
 pub(crate) mod linux_musl;
 pub(crate) mod linux_ohos;
 pub(crate) mod linux_uclibc;
diff -urN --no-dereference rust-clean/compiler/rustc_target/src/spec/mod.rs rust-workdir/compiler/rustc_target/src/spec/mod.rs
--- rust-clean/compiler/rustc_target/src/spec/mod.rs
+++ rust-workdir/compiler/rustc_target/src/spec/mod.rs
@@ -1673,6 +1673,7 @@
 
 supported_targets! {
     ("x86_64-unknown-linux-gnu", x86_64_unknown_linux_gnu),
+    ("x86_64-unknown-linux-mlibc", x86_64_unknown_linux_mlibc),
     ("x86_64-unknown-linux-gnux32", x86_64_unknown_linux_gnux32),
     ("i686-unknown-linux-gnu", i686_unknown_linux_gnu),
     ("i586-unknown-linux-gnu", i586_unknown_linux_gnu),
diff -urN --no-dereference rust-clean/compiler/rustc_target/src/spec/targets/x86_64_unknown_linux_mlibc.rs rust-workdir/compiler/rustc_target/src/spec/targets/x86_64_unknown_linux_mlibc.rs
--- rust-clean/compiler/rustc_target/src/spec/targets/x86_64_unknown_linux_mlibc.rs	1970-01-01 01:00:00.000000000 +0100
+++ rust-workdir/compiler/rustc_target/src/spec/targets/x86_64_unknown_linux_mlibc.rs
@@ -0,0 +1,27 @@
+use crate::spec::{base, Cc, LinkerFlavor, Lld, StackProbeType, Target};
+
+pub(crate) fn target() -> Target {
+    let mut base = base::linux_mlibc::opts();
+    base.cpu = "x86-64".into();
+    base.max_atomic_width = Some(64);
+    base.pre_link_args
+        .get_mut(&LinkerFlavor::Gnu(Cc::Yes, Lld::No))
+        .unwrap()
+        .push("-m64".into());
+    base.stack_probes = StackProbeType::Inline;
+
+    Target {
+        llvm_target: "x86_64-unknown-linux-mlibc".into(),
+        metadata: crate::spec::TargetMetadata {
+            description: Some("64-bit Linux with mlibc".into()),
+            tier: Some(3),
+            host_tools: Some(true),
+            std: Some(true),
+        },
+        pointer_width: 64,
+        data_layout:
+            "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128".into(),
+        arch: "x86_64".into(),
+        options: base,
+    }
+}
diff -urN --no-dereference rust-clean/library/Cargo.lock rust-workdir/library/Cargo.lock
--- rust-clean/library/Cargo.lock
+++ rust-workdir/library/Cargo.lock
@@ -151,9 +151,7 @@
 
 [[package]]
 name = "libc"
-version = "0.2.169"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b5aba8db14291edd000dfcc4d620c7ebfb122c613afb886ca8803fa4e128a20a"
+version = "0.2.172"
 dependencies = [
  "rustc-std-workspace-core",
 ]
diff -urN --no-dereference rust-clean/library/Cargo.toml rust-workdir/library/Cargo.toml
--- rust-clean/library/Cargo.toml
+++ rust-workdir/library/Cargo.toml
@@ -41,6 +41,7 @@
 rustc-demangle.debug = 0
 
 [patch.crates-io]
+libc = { path = "/base_dir/sources/rust-libc" }
 # See comments in `library/rustc-std-workspace-core/README.md` for what's going on
 # here
 rustc-std-workspace-core = { path = 'rustc-std-workspace-core' }
diff -urN --no-dereference rust-clean/library/std/src/sys/pal/unix/fs.rs rust-workdir/library/std/src/sys/pal/unix/fs.rs
--- rust-clean/library/std/src/sys/pal/unix/fs.rs
+++ rust-workdir/library/std/src/sys/pal/unix/fs.rs
@@ -15,7 +15,7 @@
 use libc::dirfd;
 #[cfg(target_os = "fuchsia")]
 use libc::fstatat as fstatat64;
-#[cfg(any(all(target_os = "linux", not(target_env = "musl")), target_os = "hurd"))]
+#[cfg(any(all(target_os = "linux", not(any(target_env = "musl", target_env = "mlibc"))), target_os = "hurd"))]
 use libc::fstatat64;
 #[cfg(any(
     target_os = "android",
@@ -26,7 +26,7 @@
     target_os = "aix",
     target_os = "nto",
     target_os = "vita",
-    all(target_os = "linux", target_env = "musl"),
+    all(target_os = "linux", any(target_env = "musl", target_env = "mlibc")),
 ))]
 use libc::readdir as readdir64;
 #[cfg(not(any(
@@ -43,7 +43,7 @@
     target_os = "hurd",
 )))]
 use libc::readdir_r as readdir64_r;
-#[cfg(any(all(target_os = "linux", not(target_env = "musl")), target_os = "hurd"))]
+#[cfg(any(all(target_os = "linux", not(any(target_env = "musl", target_env = "mlibc"))), target_os = "hurd"))]
 use libc::readdir64;
 #[cfg(target_os = "l4re")]
 use libc::readdir64_r;
@@ -54,7 +54,7 @@
     lstat as lstat64, off64_t, open as open64, stat as stat64,
 };
 #[cfg(not(any(
-    all(target_os = "linux", not(target_env = "musl")),
+    all(target_os = "linux", not(any(target_env = "musl", target_env = "mlibc"))),
     target_os = "l4re",
     target_os = "android",
     target_os = "hurd",
@@ -64,7 +64,7 @@
     lstat as lstat64, off_t as off64_t, open as open64, stat as stat64,
 };
 #[cfg(any(
-    all(target_os = "linux", not(target_env = "musl")),
+    all(target_os = "linux", not(any(target_env = "musl", target_env = "mlibc"))),
     target_os = "l4re",
     target_os = "hurd"
 ))]
@@ -880,7 +880,7 @@
 
     #[cfg(all(
         any(
-            all(target_os = "linux", not(target_env = "musl")),
+            all(target_os = "linux", not(any(target_env = "musl", target_env = "mlibc"))),
             target_os = "android",
             target_os = "fuchsia",
             target_os = "hurd"
@@ -909,7 +909,7 @@
 
     #[cfg(any(
         not(any(
-            all(target_os = "linux", not(target_env = "musl")),
+            all(target_os = "linux", not(any(target_env = "musl", target_env = "mlibc"))),
             target_os = "android",
             target_os = "fuchsia",
             target_os = "hurd",
diff -urN --no-dereference rust-clean/library/std/src/sys/pal/unix/futex.rs rust-workdir/library/std/src/sys/pal/unix/futex.rs
--- rust-clean/library/std/src/sys/pal/unix/futex.rs
+++ rust-workdir/library/std/src/sys/pal/unix/futex.rs
@@ -21,6 +21,58 @@
 /// Must be the underlying type of SmallFutex
 pub type SmallPrimitive = u32;
 
+#[cfg(target_env = "mlibc")]
+unsafe fn sys_futex_wait(
+    futex: *const AtomicU32,
+    op: i32,
+    expected: u32,
+    timeout: *const libc::timespec,
+    uaddr2: *const u32,
+    val3: u32,
+) -> core::ffi::c_long {
+    let r = libc::__do_syscall6(
+        libc::SYS_futex,
+        futex as _,
+        op as _,
+        expected as _,
+        timeout as _,
+        uaddr2 as _,
+        val3 as _,
+    );
+    libc::__do_syscall_ret(r)
+}
+
+#[cfg(not(target_env = "mlibc"))]
+unsafe fn sys_futex_wait(
+    futex: *const AtomicU32,
+    op: i32,
+    expected: u32,
+    timeout: *const libc::timespec,
+    uaddr2: *const u32,
+    val3: u32,
+) -> core::ffi::c_long {
+    libc::syscall(
+        libc::SYS_futex,
+        futex,
+        op,
+        expected,
+        timeout,
+        uaddr2, // This argument is unused for FUTEX_WAIT_BITSET.
+        val3,   // A full bitmask, to make it behave like a regular FUTEX_WAIT.
+    )
+}
+
+#[cfg(target_env = "mlibc")]
+unsafe fn sys_futex_wake(futex: *const AtomicU32, op: i32, count: i32) -> bool {
+    let r = libc::__do_syscall3(libc::SYS_futex, futex as _, op as _, count as _);
+    libc::__do_syscall_ret(r) > 0
+}
+
+#[cfg(not(target_env = "mlibc"))]
+unsafe fn sys_futex_wake(futex: *const AtomicU32, op: i32, count: i32) -> bool {
+    libc::syscall(libc::SYS_futex, futex, op, count) > 0
+}
+
 /// Waits for a `futex_wake` operation to wake us.
 ///
 /// Returns directly if the futex doesn't hold the expected value.
@@ -69,8 +121,7 @@
                 } else if #[cfg(any(target_os = "linux", target_os = "android"))] {
                     // Use FUTEX_WAIT_BITSET rather than FUTEX_WAIT to be able to give an
                     // absolute time rather than a relative time.
-                    libc::syscall(
-                        libc::SYS_futex,
+                    sys_futex_wait(
                         futex as *const AtomicU32,
                         libc::FUTEX_WAIT_BITSET | libc::FUTEX_PRIVATE_FLAG,
                         expected,
@@ -100,18 +151,24 @@
 /// On some platforms, this always returns false.
 #[cfg(any(target_os = "linux", target_os = "android"))]
 pub fn futex_wake(futex: &AtomicU32) -> bool {
-    let ptr = futex as *const AtomicU32;
-    let op = libc::FUTEX_WAKE | libc::FUTEX_PRIVATE_FLAG;
-    unsafe { libc::syscall(libc::SYS_futex, ptr, op, 1) > 0 }
+    unsafe {
+        sys_futex_wake(
+            futex as *const AtomicU32,
+            libc::FUTEX_WAKE | libc::FUTEX_PRIVATE_FLAG,
+            1,
+        )
+    }
 }
 
 /// Wakes up all threads that are waiting on `futex_wait` on this futex.
 #[cfg(any(target_os = "linux", target_os = "android"))]
 pub fn futex_wake_all(futex: &AtomicU32) {
-    let ptr = futex as *const AtomicU32;
-    let op = libc::FUTEX_WAKE | libc::FUTEX_PRIVATE_FLAG;
     unsafe {
-        libc::syscall(libc::SYS_futex, ptr, op, i32::MAX);
+        sys_futex_wake(
+            futex as *const AtomicU32,
+            libc::FUTEX_WAKE | libc::FUTEX_PRIVATE_FLAG,
+            i32::MAX,
+        );
     }
 }
 
diff -urN --no-dereference rust-clean/library/std/src/sys/pal/unix/os.rs rust-workdir/library/std/src/sys/pal/unix/os.rs
--- rust-clean/library/std/src/sys/pal/unix/os.rs
+++ rust-workdir/library/std/src/sys/pal/unix/os.rs
@@ -119,10 +119,12 @@
         #[cfg_attr(
             all(
                 any(target_os = "linux", target_os = "hurd", target_env = "newlib"),
-                not(target_env = "ohos")
+                not(target_env = "ohos"),
+                not(target_env = "mlibc")
             ),
             link_name = "__xpg_strerror_r"
         )]
+        #[cfg_attr(target_env = "mlibc", link_name = "__gnu_strerror_r")]
         fn strerror_r(errnum: c_int, buf: *mut c_char, buflen: libc::size_t) -> c_int;
     }
 
diff -urN --no-dereference rust-clean/library/std/src/sys/pal/unix/process/process_unix.rs rust-workdir/library/std/src/sys/pal/unix/process/process_unix.rs
--- rust-clean/library/std/src/sys/pal/unix/process/process_unix.rs
+++ rust-workdir/library/std/src/sys/pal/unix/process/process_unix.rs
@@ -787,7 +787,7 @@
     #[cfg(target_os = "linux")]
     fn send_pidfd(&self, sock: &crate::sys::net::Socket) {
         use libc::{CMSG_DATA, CMSG_FIRSTHDR, CMSG_LEN, CMSG_SPACE, SCM_RIGHTS, SOL_SOCKET};
-
+        
         use crate::io::IoSlice;
         use crate::os::fd::RawFd;
         use crate::sys::cvt_r;
@@ -795,7 +795,12 @@
         unsafe {
             let child_pid = libc::getpid();
             // pidfd_open sets CLOEXEC by default
+            #[cfg(not(target_env = "mlibc"))]
             let pidfd = libc::syscall(libc::SYS_pidfd_open, child_pid, 0);
+            #[cfg(target_env = "mlibc")]
+            let pidfd = libc::__do_syscall_ret(
+                libc::__do_syscall2(libc::SYS_pidfd_open, child_pid as _, 0)
+            );
 
             let fds: [c_int; 1] = [pidfd as RawFd];
 
diff -urN --no-dereference rust-clean/library/std/src/sys/pal/unix/weak.rs rust-workdir/library/std/src/sys/pal/unix/weak.rs
--- rust-clean/library/std/src/sys/pal/unix/weak.rs
+++ rust-workdir/library/std/src/sys/pal/unix/weak.rs
@@ -141,7 +141,7 @@
     libc::dlsym(libc::RTLD_DEFAULT, name.as_ptr())
 }
 
-#[cfg(not(any(target_os = "linux", target_os = "android")))]
+#[cfg(any(not(any(target_os = "linux", target_os = "android")), target_env = "mlibc"))]
 pub(crate) macro syscall {
     (fn $name:ident($($arg_name:ident: $t:ty),*) -> $ret:ty) => (
         unsafe fn $name($($arg_name: $t),*) -> $ret {
@@ -157,7 +157,7 @@
     )
 }
 
-#[cfg(any(target_os = "linux", target_os = "android"))]
+#[cfg(all(any(target_os = "linux", target_os = "android"), not(target_env = "mlibc")))]
 pub(crate) macro syscall {
     (fn $name:ident($($arg_name:ident: $t:ty),*) -> $ret:ty) => (
         unsafe fn $name($($arg_name:$t),*) -> $ret {
diff -urN --no-dereference rust-clean/library/unwind/src/lib.rs rust-workdir/library/unwind/src/lib.rs
--- rust-clean/library/unwind/src/lib.rs
+++ rust-workdir/library/unwind/src/lib.rs
@@ -68,6 +68,10 @@
     }
 }
 
+#[cfg(target_env = "mlibc")]
+#[link(name = "gcc_s")]
+unsafe extern "C" {}
+
 // This is the same as musl except that we default to using the system libunwind
 // instead of libgcc.
 #[cfg(target_env = "ohos")]
diff -urN --no-dereference rust-clean/src/tools/build-manifest/src/main.rs rust-workdir/src/tools/build-manifest/src/main.rs
--- rust-clean/src/tools/build-manifest/src/main.rs
+++ rust-workdir/src/tools/build-manifest/src/main.rs
@@ -182,6 +182,7 @@
     "x86_64-unknown-illumos",
     "x86_64-unknown-linux-gnu",
     "x86_64-unknown-linux-gnux32",
+    "x86_64-unknown-linux-mlibc",
     "x86_64-unknown-linux-musl",
     "x86_64-unknown-linux-ohos",
     "x86_64-unknown-netbsd",
diff -urN --no-dereference rust-clean/src/tools/generate-copyright/src/cargo_metadata.rs rust-workdir/src/tools/generate-copyright/src/cargo_metadata.rs
--- rust-clean/src/tools/generate-copyright/src/cargo_metadata.rs
+++ rust-workdir/src/tools/generate-copyright/src/cargo_metadata.rs
@@ -114,7 +114,11 @@
 ) -> Result<(), Error> {
     let name_version = format!("{}-{}", package.name, package.version);
     println!("Scraping notices for {}...", name_version);
-    let dep_vendor_path = vendor_root.join(name_version);
+    let dep_vendor_path = vendor_root.join(&name_version);
+    if !dep_vendor_path.exists() {
+        println!("No vendor path for {} found, skipping", name_version);
+        return Ok(());
+    }
     for entry in std::fs::read_dir(dep_vendor_path)? {
         let entry = entry?;
         let metadata = entry.metadata()?;
